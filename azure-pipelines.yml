# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
- main

pool:
  name: Default
  demands:
  - Agent.Name -equals chepopo-dell

steps:
- script: |
    echo "Source Directory: $(Build.SourcesDirectory)"
  displayName: 'Print Source Directory'


- bash: |
    jdkUrl="https://download.java.net/java/GA/jdk22.0.1/c7ec1332f7bb44aeba2eb341ae18aca4/8/GPL/openjdk-22.0.1_linux-x64_bin.tar.gz"  # Ensure this URL is correct and points to a .tar.gz file
    output="/tmp/jdk17.tar.gz"
    wget $jdkUrl -O $output
    sudo tar -xzf $output -C /opt/
    echo "JAVA_HOME=/opt/jdk-17" | sudo tee -a /etc/environment 
    echo "PATH=\$JAVA_HOME/bin:\$PATH" | sudo tee -a /etc/environment
    source /etc/environment
  displayName: 'Install JDK 17'
  env:
    BASH_ENV: /etc/profile

- script: |
    echo "JAVA_HOME set to: $JAVA_HOME"
    echo "Using Java version:"
    java -version
  displayName: 'Check Java Version'

- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 8.x 
    installationPath: $(Agent.ToolsDirectory)/dotnet

   
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqube'
    scannerMode: 'MSBuild'
    projectKey: 'Hello-Wold_Hello-Wold_cd4547d4-1bd5-4f1c-ba17-06352af60bc5'
    projectName: 'Hello-World'

- task: DotNetCoreCLI@2
  displayName: 'Build .NET Core project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

- task: SonarQubeAnalyze@5
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'
  
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
    

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false
    modifyOutputPath: false
  displayName: 'Publish .NET Core project'

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- script: dotnet pack -p Version=1.0.$(Build.BuildId) --output $(Build.ArtifactStagingDirectory)/bin/Release
  displayName: 'Packing app'

- script: |
    echo "Source Directory: $(Build.SourcesDirectory)"
    ls $(Build.ArtifactStagingDirectory)/bin/Release
    pwd
    echo "Build artifact STAGING: $(Build.ArtifactStagingDirectory)/bin/Release"
    sleep 50
  displayName: 'Print Source Directory'

- script: |
    nuget_package=$(find $(Build.ArtifactStagingDirectory)/bin/Release -name 'HelloWorld*.nupkg')
    echo "NuGet package found: $nuget_package"
    echo "##vso[task.setvariable variable=NuGetPackagePath]$nuget_package"
  displayName: 'Find NuGet package'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(NuGetPackagePath)'
    artifact: 'HelloWorld.$(Build.BuildId)'
    publishLocation: 'pipeline'
  displayName: 'Publish NuGet package as pipeline artifact'

- script: |
    dotnet nuget push --source https://pkgs.dev.azure.com/kupkup1992/Hello-Wold/_packaging/hello-world/nuget/v3/index.json --api-key az $(Build.ArtifactStagingDirectory)/bin/Release/*.nupkg
  displayName: 'Push to Azure Artifacts'

